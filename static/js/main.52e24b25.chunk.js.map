{"version":3,"sources":["components/button/button.jsx","components/quote-box/quote-box.jsx","App.js","reportWebVitals.js","index.js"],"names":["QuoteButton","props","Button","variant","href","target","onClick","click","text","QuoteBox","random","Math","floor","random2","handleChange","randomNum","setState","displayQuote","state","quotes","displayAuthor","author","handler","backGroundApp","color","fetch","response","json","this","className","id","style","transition","backgroundColor","rel","textAlign","React","Component","App","bgChange","e","backG","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kTAGaA,G,MAAc,SAACC,GAC1B,OACE,cAACC,EAAA,EAAD,CACEC,QAASF,EAAME,QACfC,KAAMH,EAAMG,KACZC,OAAQJ,EAAMI,OACdC,QAASL,EAAMM,MAJjB,SAMGN,EAAMO,SCsGEC,G,wDA5Gb,WAAYR,GAAQ,IAAD,8BACjB,cAAMA,IAoBRS,OAAS,WACP,OAAOC,KAAKC,MAAsB,KAAhBD,KAAKD,WAtBN,EA0BnBG,QAAU,WACR,OAAOF,KAAKC,MAAsB,EAAhBD,KAAKD,WA3BN,EA2CnBI,aAAe,WACb,IAAMC,EAAY,EAAKL,SACvB,EAAKM,SAAS,CACZC,aAAc,EAAKC,MAAMC,OAAOJ,GAAWP,KAC3CY,cAAe,EAAKF,MAAMC,OAAOJ,GAAWM,SAE9C,EAAKpB,MAAMqB,QAAQ,EAAKJ,MAAMK,cAAc,EAAKV,aA/CjD,EAAKK,MAAQ,CACXC,OAAQ,KACRF,aAAc,KACdG,cAAe,KAEfI,MAAO,CAAC,UAAW,UAAW,UAAW,UAAW,WAEpDD,cAAe,CACb,UACA,UACA,UACA,UACA,UACA,YAfa,E,oMAgCME,MAAM,+B,cAAvBC,E,gBACaA,EAASC,O,OAAtBA,E,OACNC,KAAKZ,SAAS,CAAEG,OAAQQ,IAClBZ,EAAYa,KAAKlB,SACvBkB,KAAKZ,SAAS,CACZC,aAAcW,KAAKV,MAAMC,OAAOJ,GAAWP,KAC3CY,cAAeQ,KAAKV,MAAMC,OAAOJ,GAAWM,S,qIAe9C,OAAKO,KAAKV,MAAMC,OASd,qBAAKU,UAAU,UAAf,SACE,sBACEC,GAAG,YACHC,MAAO,CACLC,WAAY,6BACZC,gBAAiBL,KAAKV,MAAMM,MAAMI,KAAKf,YAJ3C,UAOE,sBAAKgB,UAAU,UAAf,UACE,oBAAIC,GAAG,OAAP,SAAeF,KAAKV,MAAMD,eAC1B,mBAAGa,GAAG,SAAN,SAAgBF,KAAKV,MAAME,mBAE7B,qBAAKU,GAAG,YAAR,SACE,cAAC,EAAD,CACEvB,MAAOqB,KAAKd,aACZN,KAAK,YACLL,QAAQ,cAGZ,qBAAK2B,GAAG,QAAR,SACE,cAAC,EAAD,CACE1B,KAAI,gDAA2CwB,KAAKV,MAAMD,aAAtD,4CAEFW,KAAKV,MAAME,eACbf,OAAO,SACPG,KACE,mBACEsB,GAAG,cACHzB,OAAO,SACP6B,IAAI,aACJ9B,KAAI,gDAA2CwB,KAAKV,MAAMD,aAAtD,4CAENW,KAAKV,MAAME,eANX,mBAWFjB,QAAQ,mBA5Cd,8BACE,oBAAI4B,MAAO,CAAEI,UAAW,UAAxB,8B,GAzDaC,IAAMC,YC8BdC,E,kDA7Bb,aAAe,IAAD,8BACZ,gBAOFC,SAAW,SAACC,GACV,EAAKxB,SAAS,CACZyB,MAAOD,KART,EAAKtB,MAAQ,CACXuB,MAAO,WAHG,E,qDAeZ,OACE,qBACEZ,UAAU,MACVE,MAAO,CACLC,WAAY,6BACZC,gBAAiBL,KAAKV,MAAMuB,OAJhC,SAOE,cAAC,EAAD,CAAUX,GAAG,QAAQR,QAASM,KAAKW,iB,GAxBzBF,aCQHK,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.52e24b25.chunk.js","sourcesContent":["import Button from \"react-bootstrap/Button\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nexport const QuoteButton = (props) => {\n  return (\n    <Button\n      variant={props.variant}\n      href={props.href}\n      target={props.target}\n      onClick={props.click}\n    >\n      {props.text}\n    </Button>\n  );\n};\n","import React from \"react\";\nimport { QuoteButton } from \"../button/button\";\nimport \"./quote-box-styles.scss\";\n\nclass QuoteBox extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      quotes: null,\n      displayQuote: null,\n      displayAuthor: null,\n      // color for the box\n      color: [\"#264653\", \"#2a9d8f\", \"#e76f51\", \"#e63946\", \"#bc6c25\"],\n      // color for the app.js body\n      backGroundApp: [\n        \"#ffadad\",\n        \"#ffd6a5\",\n        \"#caffbf\",\n        \"#9bf6ff\",\n        \"#a0c4ff\",\n        \"#ffc6ff\",\n      ],\n    };\n  }\n\n  //   creating random number for quote api\n  random = () => {\n    return Math.floor(Math.random() * 1600);\n  };\n\n  // creating random number for background\n  random2 = () => {\n    return Math.floor(Math.random() * 4);\n  };\n\n  //   fetching the quotes and assigning it to displayquote/author states\n  async componentDidMount() {\n    const response = await fetch(\"https://type.fit/api/quotes\");\n    const json = await response.json();\n    this.setState({ quotes: json });\n    const randomNum = this.random();\n    this.setState({\n      displayQuote: this.state.quotes[randomNum].text,\n      displayAuthor: this.state.quotes[randomNum].author,\n    });\n  }\n\n  //changing the quotes and author also sending a bg to app.js\n  handleChange = () => {\n    const randomNum = this.random();\n    this.setState({\n      displayQuote: this.state.quotes[randomNum].text,\n      displayAuthor: this.state.quotes[randomNum].author,\n    });\n    this.props.handler(this.state.backGroundApp[this.random2()]);\n  };\n\n  render() {\n    if (!this.state.quotes) {\n      return (\n        <div>\n          <h1 style={{ textAlign: \"center\" }}>Loading...</h1>\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"wrapper\">\n        <div\n          id=\"quote-box\"\n          style={{\n            transition: \"background-color 0.3s ease\",\n            backgroundColor: this.state.color[this.random2()],\n          }}\n        >\n          <div className=\"writing\">\n            <h3 id=\"text\">{this.state.displayQuote}</h3>\n            <p id=\"author\">{this.state.displayAuthor}</p>\n          </div>\n          <div id=\"new-quote\">\n            <QuoteButton\n              click={this.handleChange}\n              text=\"New Quote\"\n              variant=\"success\"\n            />\n          </div>\n          <div id=\"tweet\">\n            <QuoteButton\n              href={`https://twitter.com/intent/tweet?text=${this.state.displayQuote} \n              \n              ${this.state.displayAuthor}`}\n              target=\"_blank\"\n              text={\n                <a\n                  id=\"tweet-quote\"\n                  target=\"_blank\"\n                  rel=\"noreferrer\"\n                  href={`https://twitter.com/intent/tweet?text=${this.state.displayQuote} \n              \n              ${this.state.displayAuthor}`}\n                >\n                  Tweet\n                </a>\n              }\n              variant=\"primary\"\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default QuoteBox;\n","import { Component } from \"react\";\nimport \"./App.css\";\nimport QuoteBox from \"./components/quote-box/quote-box\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      backG: \"#2a9d8f\",\n    };\n  }\n\n  // getting the background from quote-box\n  bgChange = (e) => {\n    this.setState({\n      backG: e,\n    });\n  };\n\n  render() {\n    return (\n      <div\n        className=\"App\"\n        style={{\n          transition: \"background-color 0.3s ease\",\n          backgroundColor: this.state.backG,\n        }}\n      >\n        <QuoteBox id=\"quote\" handler={this.bgChange} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}